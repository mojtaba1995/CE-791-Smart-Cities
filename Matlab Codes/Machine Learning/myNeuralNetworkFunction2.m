function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Apr-2018 09:17:44.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 73xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1.003;3.7940976;1;0.012];
x1_step1.gain = [1.4321835908548;0.207503821040006;0.437625923114063;76.216991785468];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8425036181334893;0;-1.8425036181334893];
IW1_1 = [0.79270979023060217 1.0411897876570491 -0.55790726293873361 1.1709372670414218;1.3614036740906037 0.4440560485497182 0.1572842303190477 -1.1486842541129214;-0.80336297181830307 -0.86678206133022573 0.98533796390126327 1.0135213236026666];

% Layer 2
b2 = [0.53103357629800474;0.59039980227412636;-0.62625479089124281;-0.02047120842353789;-0.10882759857820101;0.29262602022252926;0.41872966171614512;0.50937336396472177;-0.44794984600284327;0.35940535370734961];
LW2_1 = [0.91433389648589114 0.69825861173755421 -0.44615403007822008;-0.029248702554317552 0.8679864955151011 -0.90765721873769212;0.60056093777760022 0.35747030971554694 -0.80573643752830493;-0.71622732274556933 0.5154802611566669 0.64691565665458528;-0.15647743474745002 0.48626493624983236 0.38965724595163409;0.83147105037813418 -0.21554596093166367 -0.36580103987827894;0.58441465911910884 0.31095578035511329 0.90044409767670985;0.91898485278580599 -0.65762662437687647 -0.93110783899418248;0.31148139831317367 0.41209217603921755 -0.12251128068720352;-0.92857664285162089 -0.93633430724515865 -0.23688308581398321];

% Output 1
y1_step2.ymin = -1;
y1_step2.gain = [2;2;2;2;2;2;2;2;2;2];
y1_step2.xoffset = [0;0;0;0;0;0;0;0;0;0];
y1_step1.xrows = 73;
y1_step1.keep = [1 32 42 45 53 54 63 64 70 71];
y1_step1.remove = [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 43 44 46 47 48 49 50 51 52 55 56 57 58 59 60 61 62 65 66 67 68 69 72 73];
y1_step1.constants = [0;0;1;1;0;0;1;1;1;0;1;0;1;1;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;1;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;1;0;1;0;1;1];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step2);
y1 = removeconstantrows_reverse(y1,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

% Remove Constants Output Reverse-Processing Function
function x = removeconstantrows_reverse(y,settings)
Q = size(y,2);
x = nan(settings.xrows,Q,'like',y);
x(settings.keep,:) = y;
x(settings.remove,:) = repmat(settings.constants,1,Q);
end
